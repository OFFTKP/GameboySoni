#include "mainwindow.hxx"
#include <argparse/argparse.h>
#include <filesystem>
#include <log.h>
#include <QApplication>
#include <QSurfaceFormat>
#include <settings.hxx>
#include <update.hxx>

// clang-format off

const char* options =
// options.txt is generated by the convert_man_to_help.sh script by
// converting the hydra manpage OPTIONS section to a string literal
#include <options.txt>
;

// clang-format on

// Configurable options
const char* frontend = "qt";
const char* rom_path = nullptr;
const char* core_name = nullptr;

int main_qt(int argc, char* argv[])
{
    QSurfaceFormat format;
    format.setDepthBufferSize(24);
    format.setProfile(QSurfaceFormat::CoreProfile);
    format.setMajorVersion(3);
    format.setMinorVersion(3);
    format.setSwapInterval(0);

    QSurfaceFormat::setDefaultFormat(format);
    QApplication a(argc, argv);
    MainWindow w;
    w.show();

    if (argc > 1)
    {
        w.OpenFile(argv[1]);
    }

    return a.exec();
    ;
}

int version_cb(struct argparse* self, const struct argparse_option* option)
{
    (void)self;
    (void)option;
    std::cout << "hydra version " << HYDRA_VERSION << std::endl;
    return 0;
}

int start_frontend_cb(struct argparse* self, const struct argparse_option* option)
{
    (void)self;
    (void)option;
    std::string frontend_str(frontend);
    if (frontend_str == "qt")
    {
        return main_qt(self->argc, const_cast<char**>(self->argv));
    }
    else
    {
        std::cout << "Unknown frontend: " << frontend << std::endl;
        return 1;
    }
}

int print_settings_cb(struct argparse* self, const struct argparse_option* option)
{
    std::cout << Settings::Print() << std::endl;
    return 0;
}

int help_cb(struct argparse* self, const struct argparse_option* option)
{
    (void)self;
    (void)option;
    version_cb(self, option);
    std::cout << "A multi-system emulator frontend\n\n" << options << std::endl;
    return 0;
}

int list_cores_cb(struct argparse* self, const struct argparse_option* option)
{
    (void)self;
    (void)option;
    Settings::InitCoreInfo();
    for (auto& info : Settings::CoreInfo())
    {
        std::string filename = std::filesystem::path(info.path).filename().string();
        std::cout << fmt::format("{} - {}\n", filename, info.core_name);
    }
    std::cout << std::flush;
    return 0;
}

int main(int argc, char* argv[])
{
    auto settings_path = Settings::GetSavePath() / "settings.json";
    Settings::Open(settings_path);
    Settings::InitCoreInfo();

    if (argc == 1)
    {
        return main_qt(argc, argv);
    }

    static const char* const usages[] = {
        "hydra [args]",
        nullptr,
    };
    struct argparse_option options[] = {
        OPT_BOOLEAN('h', "help", NULL, nullptr, help_cb, 0, OPT_NONEG),
        OPT_GROUP("Options"),
        OPT_STRING('o', "open-file", &rom_path, nullptr, nullptr),
        OPT_STRING('c', "use-core", &core_name, nullptr, nullptr),
        OPT_BOOLEAN('l', "list-cores", nullptr, nullptr, list_cores_cb),
        OPT_BOOLEAN('v', "version", nullptr, nullptr, version_cb),
        OPT_STRING('p', "print-settings", nullptr, nullptr, print_settings_cb),
        OPT_STRING('f', "frontend", &frontend, nullptr, start_frontend_cb),
        OPT_END(),
    };

    struct argparse argparse;
    argparse_init(&argparse, options, usages, 0);
    argparse_describe(&argparse, "\nThe hydra emulator", nullptr);
    argparse_parse(&argparse, argc, const_cast<const char**>(argv));
    return 0;
}
