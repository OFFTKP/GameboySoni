#include "hydra/common/settings.hxx"
#include "hydra/common/version.hxx"
#include <argparse/argparse.h>
#include <filesystem>
#include <hydra/qt/main_window.hxx>
#include <iostream>
#include <QApplication>
#include <QSurfaceFormat>

#ifdef HYDRA_WEB
#include <emscripten.h>
#endif

// clang-format off

const char* options =
// options.txt is generated by the convert_man_to_help.sh script by
// converting the hydra manpage OPTIONS section to a string literal
#include <options.txt>
;

// clang-format on

const char* rom_path = nullptr;
const char* core_name = nullptr;

int qt_main(int argc, char* argv[])
{
    QSurfaceFormat format;
    format.setDepthBufferSize(24);
    format.setProfile(QSurfaceFormat::CoreProfile);
    format.setMajorVersion(3);
    format.setMinorVersion(3);
    format.setSwapInterval(0);

    QSurfaceFormat::setDefaultFormat(format);
    QApplication a(argc, argv);

    hydra::qt::MainWindow w;
    w.show();

    return a.exec();
}

int version_cb(struct argparse*, const struct argparse_option*)
{
    std::cout << hydra::common::version() << std::endl;
    return 0;
}

int help_cb(struct argparse* self, const struct argparse_option* option)
{
    version_cb(self, option);
    std::cout << "A multi-system emulator frontend\n\n" << options << std::endl;
    return 0;
}

#if defined(HYDRA_WEB)
// Setup the offline file system
EM_JS(void, em_init_fs, (),{
        FS.mkdir('/hydra');
        // Then mount with IDBFS type
        FS.mount(IDBFS, {}, '/hydra');
        FS.mkdir('/hydra/cores');
        FS.mount(IDBFS, {}, '/hydra/cores');
        FS.mkdir('/hydra/cache');
        FS.mount(IDBFS, {}, '/hydra/cache');
        // Then sync
        FS.syncfs(true, function (err) {
            Module.ccall('main_impl');
        });
  });
#endif

extern "C" int main_impl(int argc, char* argv[])
{
    printf("%s\n", hydra::common::version().c_str());
    hydra::settings::init();
    // Settings::InitCoreInfo();

    return qt_main(argc, argv);

    static const char* const usages[] = {
        "hydra [args]",
        nullptr,
    };

    struct argparse_option options[] = {
        OPT_BOOLEAN('h', "help", NULL, nullptr, help_cb, 0, OPT_NONEG),
        OPT_GROUP("Options"),
        OPT_BOOLEAN('v', "version", nullptr, nullptr, version_cb),
        OPT_END(),
    };

    struct argparse argparse;
    argparse_init(&argparse, options, usages, 0);
    argparse_describe(&argparse, "\nThe hydra emulator", nullptr);
    argparse_parse(&argparse, argc, const_cast<const char**>(argv));
    return 0;
}

int main(int argc, char* argv[])
{
#ifdef HYDRA_WEB
    em_init_fs();
#else
    return main_impl(argc, argv);
#endif
}
