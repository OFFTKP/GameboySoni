cmake_minimum_required(VERSION 3.19)
project(TKPEmu VERSION 0.1.2)
configure_file(main.cpp main.cpp)

# Debug mode, comment out if not needed
# set(CMAKE_BUILD_TYPE, Debug)
# set(CMAKE_BUILD_TYPE, Release)
# TKPEmu uses several C++20 features
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)
# Enable maximum warning levels
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wundef -Wno-unused -Wno-variadic-macros -Wno-parentheses -fdiagnostics-show-option")
# Enable maximum optimization, comment out if you need to debug or 
# see https://stackoverflow.com/questions/41361631/optimize-in-cmake-by-default
set(CMAKE_CXX_FLAGS "-O2")
set(THREADS_PREFER_PTHREAD_FLAG ON)
add_subdirectory("src/")
add_subdirectory("lib/")
add_subdirectory("glad/")
add_subdirectory("GameboyTKP/")
add_subdirectory("NESTKP/")
find_package(SDL2 REQUIRED)
include_directories(TKPEmu ${SDL2_INCLUDE_DIRS})
find_package(Boost 1.71 REQUIRED)
find_package(Threads REQUIRED)
find_package(TBB REQUIRED)
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
endif()
add_executable(TKPEmu main.cpp)
target_include_directories(TKPEmu PUBLIC "/include")
target_link_libraries(TKPEmu PRIVATE tkp_src)
target_link_libraries(TKPEmu PRIVATE tkp_lib)
target_link_libraries(TKPEmu PRIVATE glad)
target_link_libraries(TKPEmu PRIVATE GameboyTKP)
target_link_libraries(TKPEmu PRIVATE NESTKP)
target_link_libraries(TKPEmu PRIVATE ${SDL2_LIBRARIES})
target_link_libraries(TKPEmu PRIVATE ${Boost_LIBRARIES})
target_link_libraries(TKPEmu PRIVATE ${CMAKE_DL_LIBS})
target_link_libraries(TKPEmu PRIVATE TBB::tbb)
target_link_libraries(TKPEmu PRIVATE Threads::Threads)
target_include_directories(TKPEmu PUBLIC "${PROJECT_BINARY_DIR}")
